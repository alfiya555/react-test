{"version":3,"file":"static/js/324.e421c0fb.chunk.js","mappings":"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","sources":["containers/UserListContainer.tsx","pages/UserForm.tsx"],"sourcesContent":["import { connect } from 'react-redux';\r\nimport { setFormValues, setImage } from \"../store/actions\";\r\nimport UserList from '../pages/UserForm';\r\n\r\nconst mapStateToProps = (state: any) => ({\r\n    formValues: state.formValues,\r\n    image: state.image,\r\n})\r\n\r\nconst mapDispatchToProps = (dispatch: any) => ({\r\n    setFormValues: (formValues: Record<string, string>) => dispatch(setFormValues(formValues)),\r\n    setImage: (image: string) => dispatch(setImage(image)),\r\n})\r\n\r\nexport default connect(\r\n    mapStateToProps,\r\n    mapDispatchToProps\r\n)(UserList)\r\n","import {Input, Button, Flex, Box, Switch, Icon, Textarea, Avatar} from \"@chakra-ui/react\";\r\nimport {useCallback, useMemo, useState} from \"react\";\r\nimport { Formik, Form, Field } from \"formik\";\r\nimport { FormControl, FormLabel } from \"@chakra-ui/react\";\r\nimport {useTranslation} from \"react-i18next\";\r\nimport {MdPhotoCamera} from \"react-icons/md\";\r\n\r\nconst formItems = [\r\n    { code: \"name\" },\r\n    { code: \"email\", type: \"email\" },\r\n    { code: \"phone\" },\r\n    { code: \"address\" },\r\n    { code: \"country\" },\r\n    { code: \"state\" },\r\n    { code: \"city\" },\r\n    { code: \"zip\" },\r\n    { code: \"about\", type: \"textarea\" },\r\n];\r\n\r\nexport default function UserForm({ formValues, setFormValues, image, setImage }: { formValues: Record<string, string>, setFormValues: any, image: string | null, setImage: any }) {\r\n    const { t } = useTranslation();\r\n    const [isHovered, setIsHovered] = useState(false);\r\n    const handleChange = useCallback((e: any) => {\r\n        setImage(URL.createObjectURL(e.target?.files?.[0]) || null);\r\n    }, []);\r\n    const onSubmit = useCallback((values: Record<string, string>) => {\r\n        setFormValues(values);\r\n    }, []);\r\n    const imageUrl = useMemo(() => {\r\n        return image || undefined;\r\n    }, [image]);\r\n\r\n    return (\r\n        <Flex direction='row' width='80vw' gap={4} m={4}>\r\n            <Flex p={6} height={'460px'} justifyContent={'center'} flexDirection={'column'} gap={'30px'} alignItems={'center'} borderRadius='8px' flex={1} boxShadow={'rgba(145, 158, 171, 0.2) 0px 0px 2px 0px, rgba(145, 158, 171, 0.12) 0px 12px 24px -4px'}>\r\n                <Flex width={'126px'} height={'126px'} borderRadius={'50%'} position={'relative'} onMouseEnter={() => setIsHovered(true)} onMouseLeave={() => setIsHovered(false)}>\r\n                    <Avatar size='sm' height=\"100%\"\r\n                            width=\"100%\"\r\n                            position=\"absolute\"\r\n                            top=\"0\"\r\n                            left=\"0\"\r\n                            src={imageUrl}\r\n                    />\r\n                    {isHovered && <Flex zIndex={1} width={'126px'} height={'126px'} borderRadius={'50%'} backgroundColor={'rgba(14, 13, 14, 0.6)'} flexDirection={'column'} gap={'5px'} alignItems={'center'} justifyContent={'center'}>\r\n                        <Box><Icon color='white' boxSize={6} as={MdPhotoCamera}/></Box>\r\n                        <Box color={'white'} fontSize={'12px'}>Upload photo</Box>\r\n                    </Flex>}\r\n                    <Input\r\n                        type=\"file\"\r\n                        height=\"100%\"\r\n                        width=\"100%\"\r\n                        position=\"absolute\"\r\n                        top=\"0\"\r\n                        left=\"0\"\r\n                        opacity=\"0\"\r\n                        aria-hidden=\"true\"\r\n                        accept=\"image/*\"\r\n                        zIndex={1}\r\n                        onChange={handleChange}\r\n                    />\r\n                </Flex>\r\n                <Box fontSize={'10px'} color='rgb(99, 115, 129)'>Allowed *.jpeg, *.jpg, *.png, *.gif max size of 3.1 MB</Box>\r\n                <Flex dir={'row'} alignItems={'center'} gap={'10px'}>\r\n                    <Box>{t(`userForm.publicProfile`)}</Box><Switch colorScheme={'green'} />\r\n                </Flex>\r\n                <Button type=\"submit\" colorScheme=\"orange\" width=\"full\">\r\n                    { t('userForm.deleteUser') }\r\n                </Button>\r\n            </Flex>\r\n            <Flex p={6} borderRadius='8px' rounded=\"md\" flex={2} boxShadow={'rgba(145, 158, 171, 0.2) 0px 0px 2px 0px, rgba(145, 158, 171, 0.12) 0px 12px 24px -4px'} >\r\n                <Formik\r\n                    initialValues={formValues}\r\n                    onSubmit={onSubmit}\r\n                >\r\n                    {({ handleSubmit, errors, touched }) => (\r\n                        <Form onSubmit={handleSubmit}>\r\n                            <Flex flexDirection={'row'} flexWrap={'wrap'} gap={'8px'} mb={4}>\r\n                                {formItems.map((item) => (\r\n                                    <FormControl key={item.code} as={Flex} flexDirection={'column'} width={item.type === 'textarea' ? '100%' : 'calc(50% - 8px)'}>\r\n                                        <FormLabel htmlFor={item.code}>{ t(`userForm.${item.code}`) }</FormLabel>\r\n                                        <Field\r\n                                            as={item.type === 'textarea' ? Textarea : Input}\r\n                                            id={item.code}\r\n                                            name={item.code}\r\n                                            placeholder={t(`userForm.${item.code}`)}\r\n                                            type={item.type}\r\n                                            variant=\"outline\"\r\n                                        />\r\n                                    </FormControl>\r\n                                ))}\r\n                            </Flex>\r\n                            <Flex flexDirection={'row'} justifyContent={'flex-end'}>\r\n                                <Button type=\"submit\" colorScheme=\"blackAlpha\">\r\n                                    { t('userForm.saveChanges') }\r\n                                </Button>\r\n                            </Flex>\r\n                        </Form>\r\n                    )}\r\n                </Formik>\r\n            </Flex>\r\n        </Flex>\r\n    );\r\n}"],"names":["connect","state","formValues","image","dispatch","setFormValues","setImage","UserList","formItems","code","type","UserForm","_ref","t","useTranslation","_useState","useState","_useState2","_slicedToArray","isHovered","setIsHovered","handleChange","useCallback","e","_e$target","_e$target$files","URL","createObjectURL","target","files","onSubmit","values","imageUrl","useMemo","undefined","_jsxs","Flex","direction","width","gap","m","children","p","height","justifyContent","flexDirection","alignItems","borderRadius","flex","boxShadow","position","onMouseEnter","onMouseLeave","_jsx","Avatar","size","top","left","src","zIndex","backgroundColor","Box","Icon","color","boxSize","as","MdPhotoCamera","fontSize","Input","opacity","accept","onChange","dir","Switch","colorScheme","Button","rounded","Formik","initialValues","_ref2","handleSubmit","errors","touched","Form","flexWrap","mb","map","item","FormControl","FormLabel","htmlFor","concat","Field","Textarea","id","name","placeholder","variant"],"sourceRoot":""}